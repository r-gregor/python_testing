# import math, print format(math.pi, "0.3f") ... print PI number with 3 dec places.
# loop through range 1 till 41 in "0.1f", "0.2f", ...


>>> for i in range(1,41):
...     FR="0." + str(i) + "f"
...     print format(math.pi, FR)
... 
3.1
3.14
3.142
3.1416
3.14159
3.141593
3.1415927
3.14159265
3.141592654
3.1415926536
3.14159265359
3.141592653590
3.1415926535898
3.14159265358979
3.141592653589793
3.1415926535897931
3.14159265358979312
3.141592653589793116
3.1415926535897931160
3.14159265358979311600
3.141592653589793115998
3.1415926535897931159980
3.14159265358979311599796
3.141592653589793115997963
3.1415926535897931159979635
3.14159265358979311599796347
3.141592653589793115997963469
3.1415926535897931159979634685
3.14159265358979311599796346854
3.141592653589793115997963468544
3.1415926535897931159979634685442
3.14159265358979311599796346854419
3.141592653589793115997963468544185
3.1415926535897931159979634685441852
3.14159265358979311599796346854418516
3.141592653589793115997963468544185162
3.1415926535897931159979634685441851616
3.14159265358979311599796346854418516159
3.141592653589793115997963468544185161591
3.1415926535897931159979634685441851615906

# works too:
#	for i in range(1,41): FR="0." + str(i) + "f"; print FR, format(math.pi, FR)
#	(all in one line)


>>> for i in range(1,41):
...     FR="0." + str(i) + "f"
...     print FR, format(math.pi, FR)
... 
0.1f 3.1
0.2f 3.14
0.3f 3.142
0.4f 3.1416
0.5f 3.14159
0.6f 3.141593
0.7f 3.1415927
0.8f 3.14159265
0.9f 3.141592654
0.10f 3.1415926536
0.11f 3.14159265359
0.12f 3.141592653590
0.13f 3.1415926535898
0.14f 3.14159265358979
0.15f 3.141592653589793
0.16f 3.1415926535897931
0.17f 3.14159265358979312
0.18f 3.141592653589793116
0.19f 3.1415926535897931160
0.20f 3.14159265358979311600
0.21f 3.141592653589793115998
0.22f 3.1415926535897931159980
0.23f 3.14159265358979311599796
0.24f 3.141592653589793115997963
0.25f 3.1415926535897931159979635
0.26f 3.14159265358979311599796347
0.27f 3.141592653589793115997963469
0.28f 3.1415926535897931159979634685
0.29f 3.14159265358979311599796346854
0.30f 3.141592653589793115997963468544
0.31f 3.1415926535897931159979634685442
0.32f 3.14159265358979311599796346854419
0.33f 3.141592653589793115997963468544185
0.34f 3.1415926535897931159979634685441852
0.35f 3.14159265358979311599796346854418516
0.36f 3.141592653589793115997963468544185162
0.37f 3.1415926535897931159979634685441851616
0.38f 3.14159265358979311599796346854418516159
0.39f 3.141592653589793115997963468544185161591
0.40f 3.1415926535897931159979634685441851615906


##############################################################
# added 20160508 -- format specifier {0: ...}.format( ... )
>>> inport math
>>> for i in range(1,41):
...     print "{0:.{prc}f}".format(math.pi,prc=i)
... 
3.1
3.14
3.142
3.1416
3.14159
3.141593
3.1415927
3.14159265
3.141592654
3.1415926536
3.14159265359
3.141592653590
3.1415926535898
3.14159265358979
3.141592653589793
3.1415926535897931
3.14159265358979312
3.141592653589793116
3.1415926535897931160
3.14159265358979311600
3.141592653589793115998
3.1415926535897931159980
3.14159265358979311599796
3.141592653589793115997963
3.1415926535897931159979635
3.14159265358979311599796347
3.141592653589793115997963469
3.1415926535897931159979634685
3.14159265358979311599796346854
3.141592653589793115997963468544
3.1415926535897931159979634685442
3.14159265358979311599796346854419
3.141592653589793115997963468544185
3.1415926535897931159979634685441852
3.14159265358979311599796346854418516
3.141592653589793115997963468544185162
3.1415926535897931159979634685441851616
3.14159265358979311599796346854418516159
3.141592653589793115997963468544185161591
3.1415926535897931159979634685441851615906


# works too:
#	for i in range(1,41): print "{0:.{prc}f}".format(math.pi,prc=i)
#	(all in one line)
>>> for i in range(1,41): print "{0:.{prc}f}".format(math.pi,prc=i)

