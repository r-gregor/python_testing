filename: python_10-best-features_20170523.txt
https://www.quora.com/What-are-the-10-best-features-of-Python

   What are the 10 best features of Python?

***
   Trick #1

   Reversing a string in Python
>>> a =  "codementor"
>>> print "Reverse is",a[::-1]
Reverse is rotnemedoc

   Trick #2

   Transposing a Matrix
>>> mat = [[1, 2, 3], [4, 5, 6]]
>>> zip(*mat)
[(1, 4), (2, 5), (3, 6)]

   a = [1,2,3]

   Store all three values of the list in 3 new variables
>>> a = [1, 2, 3]
>>> x, y, z = a
>>> x
1
>>> y
2
>>> z
3

   Trick #4

   a = ["Code", "mentor", "Python", "Developer"]

   Create a single string from all the elements in list above.
>>> print " ".join(a)
Code mentor Python Developer

   Trick #5

   List 1 = ['a', 'b', 'c', 'd']

   List 2 = ['p', 'q', 'r', 's']

   Write a Python code to print
     * ap
     * bq
     * cr
     * ds

>>> for x, y in zip(list1,list2):
...    print x, y
...
a p
b q
c r
d s

   Trick #6

   Swap two numbers with one line of code.
>>> a=7
>>> b=5
>>> b, a =a, b
>>> a
5
>>> b
7

   Trick #7

   Print "codecodecodecode mentormentormentormentormentor" without using loops
>>> print "code"*4+' '+"mentor"*5
codecodecodecode mentormentormentormentormentor

   Trick #8

   a = [[1, 2], [3, 4], [5, 6]]

   Convert it to a single list without using any loops.

   Output:- [1, 2, 3, 4, 5, 6]
>>> import itertools
>>> list(itertools.chain.from_iterable(a))
[1, 2, 3, 4, 5, 6]
[1, 2, 3, 4, 5, 6]

   Trick #9

   Checking if two words are anagrams
def is_anagram(word1, word2):
    """Checks whether the words are anagrams.
    word1: string
    word2: string
    returns: boolean
    """

   Complete the above method to find if two words are anagrams.
from collections import Counter
def is_anagram(str1, str2):
     return Counter(str1) == Counter(str2)
>>> is_anagram('abcd','dbca')
True
>>> is_anagram('abcd','dbaa')
False

   Trick #10.

   Taking a string input.

   For example "1 2 3 4" and return [1, 2, 3, 4]

   Remember list being returned has integers in it.
    Don't use more than one line of code.
>>> result = map(lambda x:int(x) ,raw_input().split())
1 2 3 4
>>> result
[1, 2, 3, 4]

***
   1. Find number of occurrence of each character in a string
>>> from collections import Counter
>>> print Counter('abracadabra')

Counter({'a': 5, 'r': 2, 'b': 2, 'c': 1, 'd': 1})

   2. Swap two numbers
>>> x = 1
>>> y = 2
>>> x, y = y, x
>>> x
2
>>> y
1

   3. Creating a server

   Run the command in terminal (mac or linux) or command prompt (windows)
python -m SimpleHTTPServer

   4. Copy or Move a file from one location to the other
>>> import shutil
>>> shutil.copy(source, destination)
>>> shutil.move(source, destination)

   5. Map

   Example: Square all the number in a list in one line
>>> items = [1, 2, 3, 4, 5]
>>> squared = list(map(lambda x: x**2, items))
print squared

[1, 4, 9, 16, 25]

   6. import this
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

   7. Password Promt
>>> import getpass
>>> x = getpass.getpass()
Password:

   8. Generate a unique random ID
>>> import uuid
>>> print uuid.uuid4()
9b4c7afb-8e82-45be-8346-8eba94948143

   9. Find whether a string is alphabet, numeric or alpha numeric
>>> a = 'iamgod'
>>> a.isalpha()                         #string is a alphabet
True
>>> a = '123'
>>> a.isdigit()                 #string is a number
True
>>> a = 'acd1'
>>> a.isalnum()                 #string is alpha numeric
True

   10. List Comprehension (for loop inside a list)

   Example: Square the numbers from 0 to 9
>>> print [x * x for x in range(0, 10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

   11. Find all permutations of a string
>>> from itertools import permutations
>>> print [''.join(p) for p in permutations('abc')]
['abc', 'acb', 'bac', 'bca', 'cab', 'cba']

   12. System Notification
import os
message = "Hi Quorans"
os.system('notify-send ' + message)

***
   (1) Select the programming paradigm (Not just Object-Oriented).

   (2) Dynamic language, flexible when dealing with lists.

   (3) Eval() and execute code from strings.

   (4) Protect you when dealing with global variables.

   (5) Garbage Collector.

   (6) Easy to apply functional programming concepts.

   (7) Easy to use C/C++ code (Extension)

   (8) Easy to be embedded in C/C++ projects.

   (9) Good Software : (Simple, Portable, Stable, Great Documentation, Many useful libraries, different
   implementations, free open source, etc.)

   (10) Explicit in many things, Readability, and the principle of one obvious way to do it.
